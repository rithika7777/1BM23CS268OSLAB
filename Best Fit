#include <stdio.h>

#define MAX_BLOCKS 100
#define MAX_PROCESSES 100

// Function to implement the Best Fit memory management
void bestFit(int blocks[], int m, int processes[], int n) {
    int allocation[MAX_PROCESSES];

    // Initially no block is assigned
    for (int i = 0; i < n; i++) {
        allocation[i] = -1;
    }

    // Best fit for each process
    for (int i = 0; i < n; i++) {
        // Find the best fit block for this process
        int bestIdx = -1;
        for (int j = 0; j < m; j++) {
            if (blocks[j] >= processes[i]) {
                if (bestIdx == -1 || blocks[j] < blocks[bestIdx]) {
                    bestIdx = j;
                }
            }
        }

        // If a suitable block is found, allocate it
        if (bestIdx != -1) {
            allocation[i] = bestIdx;  // Allocate block
            blocks[bestIdx] -= processes[i];  // Reduce the block size
        }
    }

    // Print the allocation results
    printf("\nProcess No\tProcess Size\tBlock No\tBlock Size Left\n");
    for (int i = 0; i < n; i++) {
        if (allocation[i] != -1) {
            printf("%d\t\t%d\t\t%d\t\t%d\n", i + 1, processes[i], allocation[i] + 1, blocks[allocation[i]]);
        } else {
            printf("%d\t\t%d\t\tNot Allocated\t-\n", i + 1, processes[i]);
        }
    }
}

int main() {
    int blocks[MAX_BLOCKS], processes[MAX_PROCESSES];
    int m, n;

    // Input the number of memory blocks and processes
    printf("Enter the number of memory blocks: ");
    scanf("%d", &m);
    printf("Enter the size of each memory block:\n");
    for (int i = 0; i < m; i++) {
        printf("Block %d size: ", i + 1);
        scanf("%d", &blocks[i]);
    }

    printf("Enter the number of processes: ");
    scanf("%d", &n);
    printf("Enter the size of each process:\n");
    for (int i = 0; i < n; i++) {
        printf("Process %d size: ", i + 1);
        scanf("%d", &processes[i]);
    }

    // Call the Best Fit function
    bestFit(blocks, m, processes, n);

    return 0;
}
OUTPUT:
Enter the number of memory blocks: 3
Enter the size of each memory block:
Block 1 size: 20
Block 2 size: 30
Block 3 size: 29
Enter the number of processes: 3
Enter the size of each process:
Process 1 size: 21
Process 2 size: 23
Process 3 size: 15

Process No      Process Size    Block No        Block Size Left
1               21              3               8
2               23              2               7
3               15              1               5

Process returned 0 (0x0)   execution time : 18.862 s
Press any key to continue.
