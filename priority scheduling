#include <stdio.h>

#define MAX_PROCESSES 10

void calculateWaitingAndTurnaroundTime(int n, int burst_time[], int arrival_time[], int completion_time[]) {
    int total_turnaround_time = 0, total_waiting_time = 0;
    for (int i = 0; i < n; i++) {
        int turnaround_time = completion_time[i] - arrival_time[i];
        int waiting_time = turnaround_time - burst_time[i];
        total_turnaround_time += turnaround_time;
        total_waiting_time += waiting_time;
    }
    printf("\nAverage Turnaround Time: %.2f", (float)total_turnaround_time / n);
    printf("\nAverage Waiting Time: %.2f", (float)total_waiting_time / n);
}

void preemptivePriorityScheduling(int n, int burst_time[], int arrival_time[], int priority[]) {
    int remaining_time[MAX_PROCESSES], completion_time[MAX_PROCESSES], current_time = 0, completed = 0;
    int min_priority, next_process;

    for (int i = 0; i < n; i++) {
        remaining_time[i] = burst_time[i];
    }


    while (completed < n) {
        min_priority = 999999;
        next_process = -1;


        for (int i = 0; i < n; i++) {
            if (arrival_time[i] <= current_time && remaining_time[i] > 0 && priority[i] < min_priority) {
                min_priority = priority[i];
                next_process = i;
            }
        }


        if (next_process != -1) {
            remaining_time[next_process]--;
            current_time++;

            // If process is completed
            if (remaining_time[next_process] == 0) {
                completion_time[next_process] = current_time;
                completed++;
            }
        } else {
            current_time++;
        }
    }

    calculateWaitingAndTurnaroundTime(n, burst_time, arrival_time, completion_time);
}


void nonPreemptivePriorityScheduling(int n, int burst_time[], int arrival_time[], int priority[]) {
    int remaining_time[MAX_PROCESSES], completion_time[MAX_PROCESSES], current_time = 0, completed = 0;
    int min_priority, next_process;


    for (int i = 0; i < n; i++) {
        remaining_time[i] = burst_time[i];
    }

    while (completed < n) {
        min_priority = 999999;
        next_process = -1;


        for (int i = 0; i < n; i++) {
            if (arrival_time[i] <= current_time && remaining_time[i] > 0 && priority[i] < min_priority) {
                min_priority = priority[i];
                next_process = i;
            }
        }


        if (next_process != -1) {
            current_time += remaining_time[next_process];
            completion_time[next_process] = current_time;
            remaining_time[next_process] = 0;
            completed++;
        } else {
            current_time++;
        }
    }

    calculateWaitingAndTurnaroundTime(n, burst_time, arrival_time, completion_time);
}


int main() {
    int n, choice;

    printf("Enter number of processes: ");
    scanf("%d", &n);

    int burst_time[MAX_PROCESSES], arrival_time[MAX_PROCESSES], priority[MAX_PROCESSES];


    for (int i = 0; i < n; i++) {
        printf("\nEnter details for Process %d:\n", i + 1);
        printf("Arrival Time: ");
        scanf("%d", &arrival_time[i]);
        printf("Burst Time: ");
        scanf("%d", &burst_time[i]);
        printf("Priority: ");
        scanf("%d", &priority[i]);
    }

    printf("\nSelect Scheduling Algorithm:\n");
    printf("1. Preemptive Priority Scheduling\n");
    printf("2. Non-Preemptive Priority Scheduling\n");
    scanf("%d", &choice);

    switch(choice) {
        case 1:
            preemptivePriorityScheduling(n, burst_time, arrival_time, priority);
            break;
        case 2:
            nonPreemptivePriorityScheduling(n, burst_time, arrival_time, priority);
            break;
        default:
            printf("Invalid choice!\n");
            break;
    }

    return 0;
}

