#include <stdio.h>
#include <stdbool.h>

int findOptimal(int pages[], int frames[], int currentIndex, int n, int f) {
    int index[f];
    for (int i = 0; i < f; i++) index[i] = -1;

    for (int i = 0; i < f; i++) {
        for (int j = currentIndex + 1; j < n; j++) {
            if (frames[i] == pages[j]) {
                index[i] = j;
                break;
            }
        }
    }

    int pos = -1, farthest = -1;
    for (int i = 0; i < f; i++) {
        if (index[i] == -1)
            return i;
        else if (index[i] > farthest) {
            farthest = index[i];
            pos = i;
        }
    }
    return pos;
}

int findLRU(int time[], int f) {
    int min = time[0], pos = 0;
    for (int i = 1; i < f; i++) {
        if (time[i] < min) {
            min = time[i];
            pos = i;
        }
    }
    return pos;
}

void printFrames(int frames[], int f) {
    for (int i = 0; i < f; i++) {
        if (frames[i] != -1)
            printf("%d ", frames[i]);
        else
            printf("- ");
    }
    printf("\n");
}

int main() {
    int f, n;

    printf("Enter the number of Frames: ");
    scanf("%d", &f);

    printf("Enter the length of reference string: ");
    scanf("%d", &n);

    int pages[n];
    printf("Enter the reference string: ");
    for (int i = 0; i < n; i++) {
        scanf("%d", &pages[i]);
    }

    // FIFO
    int frames[f];
    for (int i = 0; i < f; i++) frames[i] = -1;

    int pointer = 0, faults = 0;
    printf("FIFO Page Replacement Process:\n");
    for (int i = 0; i < n; i++) {
        bool hit = false;
        for (int j = 0; j < f; j++) {
            if (frames[j] == pages[i]) {
                hit = true;
                break;
            }
        }
        if (!hit) {
            frames[pointer] = pages[i];
            pointer = (pointer + 1) % f;
            faults++;
        }
        printf("PF No. %d: ", faults);
        printFrames(frames, f);
    }
    printf("FIFO Page Faults: %d\n\n", faults);

    // LRU
    int time[f];
    for (int i = 0; i < f; i++) frames[i] = -1;

    int counter = 0;
    faults = 0;
    printf("LRU Page Replacement Process:\n");
    for (int i = 0; i < n; i++) {
        counter++;
        bool hit = false;
        for (int j = 0; j < f; j++) {
            if (frames[j] == pages[i]) {
                time[j] = counter;
                hit = true;
                break;
            }
        }
        if (!hit) {
            int pos = -1;
            for (int j = 0; j < f; j++) {
                if (frames[j] == -1) {
                    pos = j;
                    break;
                }
            }
            if (pos == -1)
                pos = findLRU(time, f);
            frames[pos] = pages[i];
            time[pos] = counter;
            faults++;
        }
        printf("PF No. %d: ", faults);
        printFrames(frames, f);
    }
    printf("LRU Page Faults: %d\n\n", faults);

    // Optimal
    for (int i = 0; i < f; i++) frames[i] = -1;
    faults = 0;
    printf("Optimal Page Replacement Process:\n");
    for (int i = 0; i < n; i++) {
        bool hit = false;
        for (int j = 0; j < f; j++) {
            if (frames[j] == pages[i]) {
                hit = true;
                break;
            }
        }
        if (!hit) {
            int pos = -1;
            for (int j = 0; j < f; j++) {
                if (frames[j] == -1) {
                    pos = j;
                    break;
                }
            }
            if (pos == -1)
                pos = findOptimal(pages, frames, i, n, f);
            frames[pos] = pages[i];
            faults++;
        }
        printf("PF No. %d: ", faults);
        printFrames(frames, f);
    }
    printf("Optimal Page Faults: %d\n", faults);

    return 0;
}
OUTPUT:
Enter the number of Frames: 3
Enter the length of reference string: 6
Enter the reference string: 1 2 3 4 6 7
FIFO Page Replacement Process:
PF No. 1: 1 - -
PF No. 2: 1 2 -
PF No. 3: 1 2 3
PF No. 4: 4 2 3
PF No. 5: 4 6 3
PF No. 6: 4 6 7
FIFO Page Faults: 6

LRU Page Replacement Process:
PF No. 1: 1 - -
PF No. 2: 1 2 -
PF No. 3: 1 2 3
PF No. 4: 4 2 3
PF No. 5: 4 6 3
PF No. 6: 4 6 7
LRU Page Faults: 6

Optimal Page Replacement Process:
PF No. 1: 1 - -
PF No. 2: 1 2 -
PF No. 3: 1 2 3
PF No. 4: 4 2 3
PF No. 5: 6 2 3
PF No. 6: 7 2 3
Optimal Page Faults: 6

Process returned 0 (0x0)   execution time : 28.746 s
Press any key to continue.
